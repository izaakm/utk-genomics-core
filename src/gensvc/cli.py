#!/usr/bin/env python
# coding: utf-8

'''
Helper for working with data from the Genomics Core.
'''

# Python standard library
import pathlib
import argparse
import sys

from gensvc.misc import bcl2fastq


def extract_bcl2fastq_stats(args):
    tables = bcl2fastq.extract_stats(args.bcl2fastq_dir)
    bcl2fastq.write_summary_stats(tables, args.outdir, dry_run=args.dry_run)
    return 0


def get_parser():
    parser = argparse.ArgumentParser(
        description=__doc__,
        formatter_class=argparse.RawDescriptionHelpFormatter
    )

    parser.add_argument(
        '-n', '--dry-run',
        action='store_true',
        default=False,
        help='Just print the output.'
    )

    parser.add_argument(
        '-v', '--verbose',
        action='store_true',
        default=False,
        help='Print extra stuff.'
    )

    subparsers = parser.add_subparsers(help='sub-command help')

    parse_extract_bcl2fastq_stats = subparsers.add_parser(
        'extract-bcl2fastq-stats', 
        aliases=['ex'],
        help=bcl2fastq.__doc__.strip().split('\n')[0]
    )

    parse_extract_bcl2fastq_stats.add_argument(
        'bcl2fastq_dir',  # Must be underscore.
        action='store',
        type=pathlib.Path,
        help='The bcl2fastq output directory containing the "Reports" and "Stats" subdirectories.'
    )

    parse_extract_bcl2fastq_stats.add_argument(
        '--statsfile',
        action='store',
        type=pathlib.Path,
        help=(
            'Optional: Statistics json file generated by bcl2fastq, eg '
            '"<bcl2fastq output>/Stats/Stats.json". If --fastqdir is '
            'provided, this defaults to "<fastqdir>/Stats/Stats.json".'
        )
    )

    parse_extract_bcl2fastq_stats.add_argument(
        '--outdir',
        action='store',
        default='SummaryStatistics',
        type=pathlib.Path,
        help='Directory in which to put the output files.'
    )

    parse_extract_bcl2fastq_stats.set_defaults(func=extract_bcl2fastq_stats)

    return parser


def main():

    args = get_parser().parse_args()
    if args.verbose:
        print(args)

    res = args.func(args)

    return res


if __name__ == '__main__':
    res = main()
    sys.exit(res)
